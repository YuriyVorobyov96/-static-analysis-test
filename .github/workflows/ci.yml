name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openssh-client curl rsync jq

      - name: Add SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Generate random project name
        id: project_name
        run: echo "PROJECT_TEMP_NAME=$(openssl rand -hex 12)" >> $GITHUB_ENV

      - name: Create remote directory and copy code
        run: |
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} "mkdir -p ${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME"
          rsync -avz ./ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME
          echo "Code copied to ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME"

      - name: Send analysis request
        run: |
          REQUEST_BODY=$(cat <<EOF
          {
            "key": "$PROJECT_TEMP_NAME",
            "name": "$PROJECT_TEMP_NAME",
            "source": "${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME",
            "mainBranch": "${{ github.ref_name }}"
          }
          EOF
          )
          echo "Request Body: $REQUEST_BODY"
          ANALYSIS_RESPONSE=$(curl --connect-timeout 0 --max-time 0 -s -w "\n%{http_code}" -X POST "${{ secrets.REMOTE_SERVER_API_ADDRESS }}/scanner/scan/analysis" \
               -H "Content-Type: application/json" \
               -H "Authorization: ${{ secrets.AUTH_TOKEN }}" \
               -d "$REQUEST_BODY")
          ANALYSIS_HTTP_STATUS=$(echo "$ANALYSIS_RESPONSE" | tail -n1)
          if [ "$ANALYSIS_HTTP_STATUS" -ne 200 ]; then
            echo "Request failed with status code $ANALYSIS_HTTP_STATUS"
            ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} "rm -rf ${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME"
            exit 1
          fi
          echo "Waiting for 15 seconds for SonarQube internal work"
          sleep 15
        env:
          REMOTE_SERVER_API_ADDRESS: ${{ secrets.REMOTE_SERVER_API_ADDRESS }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

      - name: Clean up remote directory
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} "rm -rf ${{ secrets.REMOTE_SERVER_TMP_DIR }}/$PROJECT_TEMP_NAME"

  fetch_issues:
    runs-on: ubuntu-latest
    needs: analysis
    if: ${{ needs.analysis.result == 'success' }}
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Fetch security issues
        run: |
          ISSUES_RESPONSE=$(curl -s --connect-timeout 0 --max-time 0 -w "\n%{http_code}" -X GET "${{ secrets.REMOTE_SERVER_API_ADDRESS }}/scanner/issues/get-all-security-issues?name=$PROJECT_TEMP_NAME" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.AUTH_TOKEN }}")
          ISSUES_HTTP_STATUS=$(echo "$ISSUES_RESPONSE" | tail -n1)
          ISSUES_RESPONSE_BODY=$(echo "$ISSUES_RESPONSE" | sed '$ d')
          if [ "$ISSUES_HTTP_STATUS" -ne 200 ]; then
            echo "Request failed with status code $ISSUES_HTTP_STATUS"
            exit 1
          fi
          if [ "$ISSUES_RESPONSE_BODY" != "[]" ]; then
            echo "Warning! Found security issues"
            echo "$ISSUES_RESPONSE_BODY"
            echo "$ISSUES_RESPONSE_BODY" > issues_list.json
            echo "Issues saved to file issues_list.json"
            exit 2
          fi
        env:
          REMOTE_SERVER_API_ADDRESS: ${{ secrets.REMOTE_SERVER_API_ADDRESS }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
      - name: Upload issues list artifact
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: issues_list
          path: issues_list.json
