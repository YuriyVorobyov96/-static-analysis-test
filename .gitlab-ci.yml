stages:
  - analysis

variables:
  PROJECT_TEMP_NAME: ""
  PROJECT_MAIN_BRANCH: "master" # Default branch name if not set elsewhere

analysis:
  stage: analysis
  script:
    - set -x
    - apt-get update -y
    - apt-get install -y openssh-client curl rsync jq
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-keyscan -H $REMOTE_SERVER >> ~/.ssh/known_hosts
    - export PROJECT_TEMP_NAME=$(openssl rand -hex 12)
    - 'echo "Project key: $PROJECT_TEMP_NAME"'
    - ssh $REMOTE_USER@$REMOTE_SERVER "mkdir -p $REMOTE_SERVER_TMP_DIR/$PROJECT_TEMP_NAME"
    - rsync -avz ./ $REMOTE_USER@$REMOTE_SERVER:$REMOTE_SERVER_TMP_DIR/$PROJECT_TEMP_NAME
    - echo "Code copied to $REMOTE_USER@$REMOTE_SERVER:$REMOTE_SERVER_TMP_DIR/$PROJECT_TEMP_NAME"
    - |
      REQUEST_BODY=$(cat <<EOF
      {
        "key": "$PROJECT_TEMP_NAME",
        "name": "$PROJECT_TEMP_NAME",
        "source": "$REMOTE_SERVER_TMP_DIR/$PROJECT_TEMP_NAME",
        "mainBranch": "$PROJECT_MAIN_BRANCH"
      }
      EOF
      )
      echo "Request Body: $REQUEST_BODY"
      RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$REMOTE_SERVER_API_ADDRESS/scanner/scan/analysis" \
           -H "Content-Type: application/json" \
           -H "Authorization: $AUTH_TOKEN" \
           -d "$REQUEST_BODY")
      HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
      RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d')
      echo "Curl Response: $RESPONSE_BODY"
      if [ "$HTTP_STATUS" -ne 200 ]; then
        echo "Request failed with status code $HTTP_STATUS"
        exit 1
      fi
      if [ "$RESPONSE_BODY" != "[]" ]; then
        echo "Warning: Response is not an empty JSON array. Response: $RESPONSE_BODY"
        exit 2  # Custom exit code for warnings
      fi
    - ssh $REMOTE_USER@$REMOTE_SERVER "rm -rf $REMOTE_SERVER_TMP_DIR/$PROJECT_TEMP_NAME"
  allow_failure:
    exit_codes: [2]
  # Default branch name if not set elsewhere
  only:
    - master
